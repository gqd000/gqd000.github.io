<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对多态的简单理解</title>
      <link href="posts/946c.html"/>
      <url>posts/946c.html</url>
      
        <content type="html"><![CDATA[<h1 id="对多态的简单理解"><a href="#对多态的简单理解" class="headerlink" title="对多态的简单理解"></a>对多态的简单理解</h1><blockquote><p><strong>多态不能对子类的属性起作用</strong></p></blockquote><p>通过代码了解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">deom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 多态 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>多态 duo <span class="token operator">=</span> <span class="token keyword">new</span> 多态<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Animals animals = new Dog(); 父类引用子类的对象，调用子类重写的父类的方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Animals animals = new Cat(); 父类引用子类的对象，调用子类重写的父类的方法</span><span class="token punctuation">}</span><span class="token comment">//使用多态时写的函数</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Animals</span> animals<span class="token punctuation">)</span><span class="token punctuation">{</span>animals<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>animals<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态不能对子类的属性起作用</span><span class="token punctuation">}</span><span class="token comment">//不使用多态时写的函数（实现相同功能）</span><span class="token keyword">void</span> <span class="token function">teat</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">{</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">teat</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">)</span><span class="token punctuation">{</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//由此可见，使用多态可以增加代码的复用性</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物吃东西。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物叫。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫吃鱼。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵喵！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗吃肉。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04的初体验</title>
      <link href="posts/8f7a.html"/>
      <url>posts/8f7a.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、预备工作"><a href="#一、预备工作" class="headerlink" title="一、预备工作"></a>一、预备工作</h1><h2 id="1-下载VMware并安装"><a href="#1-下载VMware并安装" class="headerlink" title="1. 下载VMware并安装"></a>1. 下载<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html"><strong>VMware</strong></a>并安装</h2><p><del>(许可证：ZF3R0-FHED2-M80TY-8QYGC-NPKYF)</del></p><h2 id="2-下载Ubuntu镜像"><a href="#2-下载Ubuntu镜像" class="headerlink" title="2. 下载Ubuntu镜像"></a>2. 下载<a href="https://ubuntu.com/download/desktop">Ubuntu镜像</a></h2><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/v2-0528c3ad69dfe7d8567e5f4bc99bcc5b_1440w.jpg" alt="Ubuntu20.04"></p><h1 id="二、-新系统调整"><a href="#二、-新系统调整" class="headerlink" title="二、 新系统调整"></a>二、 新系统调整</h1><h2 id="1-软件换源"><a href="#1-软件换源" class="headerlink" title="1. 软件换源"></a>1. 软件换源</h2><ul><li><p>在换源之前，要先对原来的源进行备份，在Ubuntu中，软件源存在/etc/apt/sources.list中，用以下命令备份：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打卡文件 <code>/etc/apt/sources.list</code>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo gedit /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除文件里的内容，并复制要换的源（如阿里源）：</p><pre class="line-numbers language-none"><code class="language-none"># 阿里源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 网易源deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 清华源deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新软件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>大功告成！</p></li></ul><h1 id="三、番外篇"><a href="#三、番外篇" class="headerlink" title="三、番外篇"></a>三、番外篇</h1><h2 id="1-VMware的完全卸载"><a href="#1-VMware的完全卸载" class="headerlink" title="1. VMware的完全卸载"></a>1. VMware的完全卸载</h2><blockquote><p>Vmware卸载后会有残余，这会导致我们再次安装后出现各种问题，非常麻烦，于是以下是Vmware完全卸载的方法。</p></blockquote><ul><li><p>将Vmware相关的服务停止，如下：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210915225708434.png" alt="image-20210915225708434"></p></li><li><p>删除注册表</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210915231814731.png" alt="image-20210915231814731"></p></li><li><p>在任务管理器结束Vmware相关的进程</p></li><li><p>卸载Vmware程序</p></li><li><p>结束！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地用IDEA刷LeetCode</title>
      <link href="posts/ad0e.html"/>
      <url>posts/ad0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何优雅地用IDEA刷LeetCode"><a href="#如何优雅地用IDEA刷LeetCode" class="headerlink" title="如何优雅地用IDEA刷LeetCode"></a>如何优雅地用IDEA刷LeetCode</h1><ol><li><p>点击右上角<code>文件-&gt;设置-&gt;Plugins</code>，搜索leetcode，找到leetcode editor并安装，如下图：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210415210517555.png" alt="image-20210415210517555"></p></li><li><p>在IDEA右侧边点击leetcode，打开插件主界面后打开设置：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210415211241139.png" alt="image-20210415211241139"></p></li><li><p>CodeFileName处填：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">P</span>$<span class="token operator">!</span><span class="token punctuation">{</span>question<span class="token punctuation">.</span>frontendQuestionId<span class="token punctuation">}</span>$<span class="token operator">!</span>velocityTool<span class="token punctuation">.</span><span class="token function">camelCaseName</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>titleSlug<span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CodeTemplate处填：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token namespace">leetcode<span class="token punctuation">.</span>editor<span class="token punctuation">.</span>cn</span><span class="token punctuation">;</span> <span class="token comment">// 此处不要改</span><span class="token comment">//Java：${question.title}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>frontendQuestionId<span class="token punctuation">}</span>$<span class="token operator">!</span>velocityTool<span class="token punctuation">.</span><span class="token function">camelCaseName</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>titleSlug<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P</span>$<span class="token operator">!</span><span class="token punctuation">{</span>question<span class="token punctuation">.</span>frontendQuestionId<span class="token punctuation">}</span>$<span class="token operator">!</span>velocityTool<span class="token punctuation">.</span><span class="token function">camelCaseName</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>titleSlug<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TO TEST</span>    <span class="token punctuation">}</span>    $<span class="token punctuation">{</span>question<span class="token punctuation">.</span>code<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填完之后点应用，确定。</p></li><li><p>然后点如下操作：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210415211744092.png" alt="image-20210415211744092"></p></li><li><p>大功告成，去刷题吧。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自定义排序以及lambda表达</title>
      <link href="posts/3456.html"/>
      <url>posts/3456.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java的自定义排序以及lambda表达"><a href="#Java的自定义排序以及lambda表达" class="headerlink" title="Java的自定义排序以及lambda表达"></a>Java的自定义排序以及lambda表达</h1><p><em>以数组某个元素的大小排序为例：</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token comment">//将大数组中的小数组按照右端点元素大小升序排序</span><span class="token keyword">public</span> <span class="token keyword">class</span> 自定义排序 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>普通写法 result1 <span class="token operator">=</span> <span class="token keyword">new</span> 普通写法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result1<span class="token punctuation">.</span><span class="token function">zipai</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通写法输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>lambda表达 result2 <span class="token operator">=</span> <span class="token keyword">new</span> lambda表达<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result2<span class="token punctuation">.</span><span class="token function">zipai</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lambda表达写法输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> 普通写法<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zipai</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2<span class="token punctuation">)</span> <span class="token comment">//使用Comparator时需要有compare函数</span><span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//升序</span><span class="token comment">// return o2[1]-o1[1]; //降序</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> lambda表达<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zipai</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//比较负数会越界</span>        <span class="token comment">// Arrays.sort(a,(o1, o2) -&gt; o1[1]&gt;o2[1]?1:-1); 完整写法</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决git push速度慢的问题</title>
      <link href="posts/3a4c.html"/>
      <url>posts/3a4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="解决git-push速度慢的问题"><a href="#解决git-push速度慢的问题" class="headerlink" title="解决git push速度慢的问题"></a>解决git push速度慢的问题</h1><blockquote><p>今天更新一篇文章，内容比较多，所以在部署的过程中遇到了push速度慢的问题，即使kx上网全局也无济于事，最后通过查阅一些文章找到了解决方法。</p></blockquote><p>开始时，我用git协议部署，即使kx上网全局也会卡在Writing objects上：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413224633524.png" alt="image-20210413224633524"></p><p>后来查阅资料发现，git可以使用代理，但Windows配置git协议的代理比较麻烦，所以用了https协议来部署（https协议的代理比较容易配置<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413224940881.png" alt="image-20210413224940881"></p><p>现在可以愉快的配置代理了:(</p><pre class="line-numbers language-none"><code class="language-none"># 端口号根据自身情况决定# 需要鉴权git config http.proxy http://username:password@127.0.0.1:1080 # 需要鉴权# 非全局代理git config http.proxy http://127.0.0.1:1080# 全局代理（所有项目）git config --global http.proxy http://127.0.0.1:1080# 查看全局代理git config --get --global http.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，问题解决了，享受这丝滑吧！<span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413225625508.png" alt="image-20210413225625508"></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github Pages+Vercel搭建博客(详细)</title>
      <link href="posts/c7e2.html"/>
      <url>posts/c7e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-Pages-Vercel搭建博客-详细"><a href="#Hexo-Github-Pages-Vercel搭建博客-详细" class="headerlink" title="Hexo+Github Pages+Vercel搭建博客(详细)"></a>Hexo+Github Pages+Vercel搭建博客(详细)</h1><blockquote><p>本篇文章主要写一些我搭建这个博客的详细过程以及一些踩坑记录。</p><p><strong>持续更新中~~</strong></p></blockquote><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>此博客是采用用<a href="https://hexo.io/zh-cn/">Hexo</a>博客框架搭建的。Hexo是一个由Node.js驱动的快速，简单且功能强大的静态博客框架。它能快速生成由<strong>MarkDown</strong>等渲染的文章，总有数百个主题和插件可供使用，并且支持<strong>一键部署</strong>到Github Pages上。<br>而本博客就是部署到Github Pages上并用<a href="https://vercel.com/">Vercel</a>加速国内访问的(后面会详细说明)，采用了<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题。</p><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><h2 id="1-Node-js环境配置"><a href="#1-Node-js环境配置" class="headerlink" title="1. Node.js环境配置"></a>1. Node.js环境配置</h2><ul><li><p>①首先去<a href="https://nodejs.org/en/download/">Node.js官网</a>下载安装程序，一路默认即可(路径可根据自己的需求更改)，然后安装。</p></li><li><p>②测试是否安装成功及环境变量是否正确。在cmd命令行输入：<code>node -v</code>查看效果。若出现：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413160808990.png" alt="image-20210413160808990"></p><p>则说明环境变量添加完成，进行下一步。如果报错，则需要手动添加环境变量：右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，双击Path，点击添加，将node.js的安装复制进去即可。</p></li><li><p>③改npm的源(将npm的源改为国内镜像了提高访问和下载速度)</p><pre class="line-numbers language-none"><code class="language-none"># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-Git的安装及配置"><a href="#2-Git的安装及配置" class="headerlink" title="2.Git的安装及配置"></a>2.Git的安装及配置</h2><ul><li>①首先去<a href="https://git-scm.com/">Git官网</a>下载安装程序，一路默认Next(有特殊需求可改一些配置)，安装。</li><li>②安装完成后右键桌面会出现两个和Git相关的选项，表示安装成功。</li></ul><h2 id="3-Git连接Github以及配置SSH连接"><a href="#3-Git连接Github以及配置SSH连接" class="headerlink" title="3.Git连接Github以及配置SSH连接"></a>3.Git连接Github以及配置SSH连接</h2><ul><li><p>①Git账户邮箱配置。在桌面点击鼠标右键，点击 <code>Git Bash Here</code>，并分别输入以下命令并回车：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "此处填写你Github的用户名"git config --global user.email "此处填写你Github的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>②SSH连接。在桌面点击鼠标右键，点击 <code>Git Bash Here</code>。输入以下代码并一直回车：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C “your_email@example.com” # 引号里填你的Github注册邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>③提交SSH私钥。在 C:/Users/[Windows用户名] 目录下找到名为.ssh 的文件夹，找到并用记事本打开<code>id_rsa.pub</code>，复制里面的内容。然后到GitHub上点击右上角头像，进入settings：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413161348594.png" alt="image-20210413161348594"></p></li><li><p>④新建SSH密钥：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413161538670.png" alt="image-20210413161538670"></p></li><li><p>⑤添加密钥：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413161824201.png" alt="image-20210413161824201"></p></li></ul><h2 id="4-测试是否连成功"><a href="#4-测试是否连成功" class="headerlink" title="4. 测试是否连成功"></a>4. 测试是否连成功</h2><ul><li>在<code>Git Bush</code>或者<code>cmd</code>输入<code>ssh -T git@github.com</code>，如果出现以下语句则说明连接成功：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413180723039.png" alt="image-20210413180723039"></li></ul><p><strong>注意事项：</strong></p><ol><li><p>仓库名称尽量命名为**(example).github.io**(example)为GitHub账户名，方便Hexo部署；</p></li><li><p>建完仓库后如果分支不是master，则需新建master分支：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413164650054.png" alt="image-20210413164650054"></p></li><li><p>点击仓库的Settings，进入Pages：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413164208605.png" alt="image-20210413164208605"></p></li><li><p>将默认分支设置为master：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413165433792.png" alt="image-20210413165433792"></p></li><li><p>将Page指向master分支后save：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413164758578.png" alt="image-20210413164208605"></p></li><li><p>此时以及可以通过：<code>https://example.github.io</code>(example为GitHub用户名)访问网页了，如果有<code>readme</code>文档则显示<code>readme</code>文档内容，否则显示<strong>404 File not found</strong><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。至此，GitHub Pages页面创建完成。</p></li></ol><h1 id="三、开始搭建博客"><a href="#三、开始搭建博客" class="headerlink" title="三、开始搭建博客"></a>三、开始搭建博客</h1><h2 id="1-建立本地博客站点文件夹"><a href="#1-建立本地博客站点文件夹" class="headerlink" title="1.建立本地博客站点文件夹"></a>1.建立本地博客站点文件夹</h2><ul><li><p>①选定一个磁盘，新建文件夹（如：example），在该文件夹所在目录（不是example文件夹里）右键<code>Git Bush Here</code>,然后依次输入以下命令并等待执行完毕：</p><pre class="line-numbers language-none"><code class="language-none"># hexo框架的安装npm install -g hexo-cli# 等上一个命令完成后，在输入下面的命令hexo init example #（新建文件夹的名称）初始化文件夹cd example #（新建文件夹的名称）npm install  # 安装博客所需要的依赖文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>②执行完毕后进入站点文件夹（example），此时已初始化完成，包含一些文件。右键<code>Git Bush Here</code>,执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后打开浏览器，输入：<code>http://localhost:4000</code>或<code>127.0.0.1:4000</code>即可看到博客在本地的运行。</p></li></ul><h2 id="2-本地博客部署到GitHub上"><a href="#2-本地博客部署到GitHub上" class="headerlink" title="2. 本地博客部署到GitHub上"></a>2. 本地博客部署到GitHub上</h2><ul><li><p>①安装部署插件，在站点文件夹（example）中执行；</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>②修改配置文件。把<code>_config.yml</code>用代码编辑器（如Vscode）打开，修改站点主要的属性：</p><pre class="line-numbers language-none"><code class="language-none">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种，简体中文为：zh-CN   timezone: 时区（可不用填，hexo默认使用电脑时区）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改url：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413220354674.png" alt="image-20210413220354674"></p><p>拉到文件最底部，在 deploy 下面添加一个 repo 项：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413220753293.png" alt="image-20210413220753293"></p></li><li><p>③部署到GitHub 上。运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，已经可以通过<code>https://&lt;用户名&gt;.github.io</code>访问博客啦！<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简易的贪心算法</title>
      <link href="posts/7974.html"/>
      <url>posts/7974.html</url>
      
        <content type="html"><![CDATA[<h1 id="最简易的贪心算法"><a href="#最简易的贪心算法" class="headerlink" title="最简易的贪心算法"></a>最简易的贪心算法</h1><blockquote><p>参考资料：<a href="https://github.com/gqd000/Leetcode-note/blob/main/%E8%B0%B7%E6%AD%8C%E9%AB%98%E7%95%85Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0.pdf"><strong>谷歌高畅Leetcode刷题笔记</strong></a>。</p><p>题目网址：<a href="https://leetcode-cn.com/"><strong>LeetCode</strong></a>。</p></blockquote><h2 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h2><p>顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是<strong>局部最优的</strong>，从而使最后得到的结果是<strong>全局最优的</strong>。全局最优结果是局部最优结果的和，且局部结果<strong>互不相干</strong>！</p><h2 id="例题及题解"><a href="#例题及题解" class="headerlink" title="例题及题解"></a>例题及题解</h2><h3 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h3><h4 id="455-分发饼干-（简单）"><a href="#455-分发饼干-（简单）" class="headerlink" title="455.分发饼干 （简单）"></a><strong><a href="https://leetcode-cn.com/problems/assign-cookies/">455.分发饼干</a></strong> （简单）</h4><p><strong>题目大意：</strong></p><blockquote><p>给我们一堆饼干和一群孩子，要求我们把饼干分给孩子，每个孩子有一个饥饿值，每个饼干有一个饱腹值，且每个孩子只能分一个饼干，要求我们求出最多能吃饱的孩子数量。</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>首先可以分别将孩子饥饿值的数组和饼干饱腹值的数组升序排序，然后<strong>饥饿值最小</strong>的孩子吃<strong>饱腹值最少</strong>的饼   干，这样依次取值即可满足局部最优，局部最优加和即全局最优。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="135-分发糖果（困难）"><a href="#135-分发糖果（困难）" class="headerlink" title="135. 分发糖果（困难）"></a>135. <a href="https://leetcode-cn.com/problems/candy/">分发糖果</a>（困难）</h4><p><strong>题目大意：</strong></p><blockquote><p>一群孩子站成一排，每个孩子有自己的评分，现在要求我们给这些孩子分发糖果，要求：</p><ul><li>1.每个孩子至少分配一个糖果。</li><li>2.评分高于两侧的孩子得到的糖果数量必须高于两侧孩子得到的糖果数量。</li><li>求出至少需要准备的糖果数。</li></ul></blockquote><p><strong>解题思路：</strong></p><blockquote><p>这道题我们不再需要排序，只需要<strong>左右两次遍历</strong>即可，设数组cano记录每个孩子分得的糖果数量，数组ratings记录孩子的评分。首先我们初始化cano数组为<strong>1</strong>（即初始为糖果总数最小值），然后对数组ratings<strong>从左向右（左条件）</strong>进行遍历，当ratings(i+1)&gt;ratings(i)时，cano(i+1)+1；最后对ratings进行<strong>从右向左（右条件）</strong>遍历，与左边不同的是，此次遍历不能直接更新数组cano的值，需要取更新值和原值中大的值，即:<br>$$<br>cano(i+1)= max(cano(i),cano(i+1))。<br>$$<br>这样做即可同时满足左条件和右条件。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">candy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ratings<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> ct <span class="token operator">=</span> ratings<span class="token punctuation">.</span>length<span class="token punctuation">,</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cano <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ct<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ct<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ct <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ct <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//满足左规则后右规则可能会更新数据，因此取去最大值同时满足左右规则</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> it<span class="token operator">:</span>cano<span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">+=</span>it<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h3><h4 id="435-无重叠区间（中等）"><a href="#435-无重叠区间（中等）" class="headerlink" title="435. 无重叠区间（中等）"></a><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">435. 无重叠区间</a>（中等）</h4><p><strong>题目大意：</strong></p><blockquote><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。<strong>注意：</strong></p><ol><li>可以认为区间的终点总是大于它的起点。</li><li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li></ol></blockquote><p><strong>解题思路：</strong></p><blockquote><p>这个区间的尾元素总是大于首元素，要保证最优，需要起始区间的尾元素最小，这样才能容纳最多的区间。所以首先需要根据区间的尾元素按照升序排序（此处用到<a href="https://www.hexoblog.gq/posts/3456.html">自定义排序</a>），然后设定一个起始数begin =  intervals[0][1]；再遍历排序完成的区间数组，比较起始区间尾元素和第i（i = 1,2,3,…,intervals.length）个区间的首元素的大小，若：<br>$$<br>begin&gt;intervals[i][0]<br>$$<br>则说明第i个区间与初始区间重合，故计数cnt++；反之满足不重合条件，不计数，<strong>并更新初始区间尾元素为：</strong>begin = intervals[i][1]，最后返回cnt即可。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自定义排序</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&gt;</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">else</span><span class="token punctuation">{</span>                begin <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：<a href="https://www.hexoblog.gq/posts/3456.html">自定义排序</a></p></blockquote><h4 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/">452. 用最少数量的箭引爆气球</a></h4><p><strong>题目大意：</strong></p><blockquote><p>给定一个数组points，包含<code>points.length</code>个区间，求不重叠区间的个数。</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>该题与上文中<a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">435. 无重叠区间</a>有点类似，也可用lambda表达写，但有个坑：测试用例：<code>[[-2147483646,-2147483645],[2147483646,2147483647]]</code>，若直接用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序，相减会溢出，导致排序错误，所以应该这样写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序后和435题类似，先定义一个<code>begin = points[0][1]</code>，然后开始遍历，更新begin值。不同的是，要注意区间长度的影响，如测试用例：<code>[[1,2],[4,5],[1,5]]</code>，若排序为：</p><ul><li>[1,5]</li><li>[1,2]</li><li>[4,5]</li></ul><p>则计算出只需一箭就可射完，但实际需要两箭。解决方法：只需在判断<code>begin &gt; ponits[i][0]</code>后再判断是否<code>begin &gt; points[i][1]</code>，若是，则更新begin的值为<code>points[i][1]</code>，相当于缩小区间。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> points <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> begin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>                begin <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> begin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                begin <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/">763. 划分字母区间</a></h4><p><strong>题目大意：</strong></p><blockquote><p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。如：</p><blockquote><p>输入：S = “ababcbacadefegdehijhklij”<br>输出：[9,7,8]<br>解释：<br>划分结果为 “ababcbaca”, “defegde”, “hijhklij”。<br>每个字母最多出现在一个片段中。<br>像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</p></blockquote></blockquote><p><strong>解题思路：</strong></p><blockquote><p>首先我们可以将某个区间内所有出现的字母<strong>最后出现（需要不断更新）</strong>的位置用数组<code>n</code>记录，然后设一个<code>begin</code>和<code>end</code>分别表示取出的区间的首位和末尾的位置，然后遍历所有字母，每遇到一个字母，就更新<code>end</code>的值，end要求取最后出现该字母的位置，即数组<code>n</code>中对应字母下标的值（总是取最大），即：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>n<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当某一段字母遍历结束时（即<code>i == end</code>），<code>end-begin+1</code>就是该段字母中字母的数量，存入结果数组<code>result</code>，然后更新<code>begin</code>的值为<code>begin=end+1</code>。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>n<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> end<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                begin<span class="token operator">=</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode-算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/5220.html"/>
      <url>posts/5220.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><a href="www.baidu.com">sdsd</a>,</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
