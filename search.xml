<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最简易的贪心算法</title>
      <link href="posts/7974.html"/>
      <url>posts/7974.html</url>
      
        <content type="html"><![CDATA[<h1 id="最简易的贪心算法"><a href="#最简易的贪心算法" class="headerlink" title="最简易的贪心算法"></a>最简易的贪心算法</h1><blockquote><p>参考资料：<a href="https://github.com/gqd000/Leetcode-note/blob/main/%E8%B0%B7%E6%AD%8C%E9%AB%98%E7%95%85Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0.pdf"><strong>谷歌高畅Leetcode刷题笔记</strong></a>。</p><p>题目网址：<a href="https://leetcode-cn.com/"><strong>LeetCode</strong></a>。</p></blockquote><h2 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h2><p>顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是<strong>局部最优的</strong>，从而使最后得到的结果是<strong>全局最优的</strong>。全局最优结果是局部最优结果的和，且局部结果<strong>互不相干</strong>！</p><h2 id="例题及题解"><a href="#例题及题解" class="headerlink" title="例题及题解"></a>例题及题解</h2><h3 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h3><h4 id="455-分发饼干-（简单）"><a href="#455-分发饼干-（简单）" class="headerlink" title="455.分发饼干 （简单）"></a><strong><a href="https://leetcode-cn.com/problems/assign-cookies/">455.分发饼干</a></strong> （简单）</h4><p><strong>题目大意：</strong></p><blockquote><p>给我们一堆饼干和一群孩子，要求我们把饼干分给孩子，每个孩子有一个饥饿值，每个饼干有一个饱腹值，且每个孩子只能分一个饼干，要求我们求出最多能吃饱的孩子数量。</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>首先可以分别将孩子饥饿值的数组和饼干饱腹值的数组升序排序，然后<strong>饥饿值最小</strong>的孩子吃<strong>饱腹值最少</strong>的饼   干，这样依次取值即可满足局部最优，局部最优加和即全局最优。</p></blockquote><p><strong>解题代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="135-分发糖果（困难）"><a href="#135-分发糖果（困难）" class="headerlink" title="135. 分发糖果（困难）"></a>135. <a href="https://leetcode-cn.com/problems/candy/">分发糖果</a>（困难）</h4><p><strong>题目大意：</strong></p><blockquote><p>一群孩子站成一排，每个孩子有自己的评分，现在要求我们给这些孩子分发糖果，要求：</p><ul><li>1.每个孩子至少分配一个糖果。</li><li>2.评分高于两侧的孩子得到的糖果数量必须高于两侧孩子得到的糖果数量。</li><li>求出至少需要准备的糖果数。</li></ul></blockquote><p><strong>解题思路：</strong></p><blockquote><p>这道题我们不再需要排序，只需要<strong>左右两次遍历</strong>即可，设数组cano记录每个孩子分得的糖果数量，数组ratings记录孩子的评分。首先我们初始化cano数组为<strong>1</strong>（即初始为糖果总数最小值），然后对数组ratings<strong>从左向右（左条件）</strong>进行遍历，当ratings(i+1)&gt;ratings(i)时，cano(i+1)+1；最后对ratings进行<strong>从右向左（右条件）</strong>遍历，与左边不同的是，此次遍历不能直接更新数组cano的值，需要取更新值和原值中大的值，即:<br>$$<br>cano(i+1)= max(cano(i),cano(i+1))。<br>$$<br>这样做即可同时满足左条件和右条件。</p></blockquote><p><strong>解题代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">candy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ratings<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ct <span class="token operator">=</span> ratings<span class="token punctuation">.</span>length<span class="token punctuation">,</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cano <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>ct<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ct<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ct <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ct <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//满足左规则后右规则可能会更新数据，因此取去最大值同时满足左右规则</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> it<span class="token operator">:</span>cano<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">+=</span>it<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode-算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/5220.html"/>
      <url>posts/5220.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><a href="www.baidu.com">sdsd</a>,</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
