<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java笔记（一）</title>
      <link href="posts/1.html"/>
      <url>posts/1.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java面向对象初级"><a href="#Java面向对象初级" class="headerlink" title="Java面向对象初级"></a>Java面向对象初级</h1><h4 id="一、方法的重载"><a href="#一、方法的重载" class="headerlink" title="一、方法的重载"></a>一、方法的重载</h4><ol><li><p>注意事项和使用细节</p><ul><li>方法名必须相同；</li><li>形参列表必须不同（形参类型、个数或顺序至少有一个不同，参数名无要求）；</li><li>返回类型无要求。</li></ul></li><li><p><strong>可变参数</strong>：<code>public int sum(int ... nums)</code> 表示可接收多个参数。</p></li></ol><ul><li><p>可变参数本质为数组；</p></li><li><p>参数为0个或多个；</p></li><li><p>实参可以为数组；</p></li><li><p>可以与普通参数放在同一形参列表，但必须<strong>放在最后</strong>；</p></li><li><p>一个形参列表中只能有一个可变参数。</p></li></ul><h4 id="二、作用域"><a href="#二、作用域" class="headerlink" title="二、作用域"></a>二、作用域</h4><ol><li>全局变量有默认值，可以不用赋值，局部变量无默认值，需要赋值。</li><li>属性可以与局部变重名，使用时遵循就近一致原则。</li></ol><h4 id="三、构造器"><a href="#三、构造器" class="headerlink" title="三、构造器"></a>三、构造器</h4><ol><li><p>构造器是初始化对象，并非创建对象。</p></li><li><p>一个类可以定义多个不同的构造器，即构造器重载。</p></li><li><p>对象创建流程：</p><p>对于：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token comment">//默认初始化</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span> <span class="token comment">//显式初始化</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 构造器</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//构造器初始化</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Preson</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"小倩"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加载Person类的信息（<code>Person.class</code>），只加载一次；</li></ul></li></ol><ul><li><p>在堆中分配空间（地址）；</p><ul><li><p>完成对象初始化：</p><ul><li><p>默认初始化(age=0,name=null)</p></li><li><p>显式初始化(age=90,name=null)</p></li><li><p>构造器初始化(age=20,name=小倩)</p></li></ul></li></ul></li><li><p>把对象在堆中的地址返回给p1（引用）</p></li></ul><h4 id="四、封装"><a href="#四、封装" class="headerlink" title="四、封装"></a>四、封装</h4><h5 id="封装的作用"><a href="#封装的作用" class="headerlink" title="封装的作用"></a>封装的作用</h5><ol><li>提高代码的安全性；</li><li>提高代码的复用性；</li><li>“高内聚”：封装细节，便于修改内部代码，提高可维护性；</li><li>“低耦合”：简化外部调用，便于调用者使用，便于扩展和写作。</li></ol><h5 id="封装主要代码"><a href="#封装主要代码" class="headerlink" title="封装主要代码"></a>封装主要代码</h5><ol><li><p><code>get()</code>和<code>set()</code>函数，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> person <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//数据校验</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字长度不符合要求，默认张三！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//数据校验</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄不符合要求，默认18！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="封装与构造器"><a href="#封装与构造器" class="headerlink" title="封装与构造器"></a>封装与构造器</h5><ol><li><p>构造器可破解封装中的数据校验，所以可进行下列操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> person <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//破解了数据校验</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token comment">//修复（构造器中调用set函数）</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//数据校验</span><span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字长度不符合要求，默认张三！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//数据校验</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄不符合要求，默认18！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="五、继承"><a href="#五、继承" class="headerlink" title="五、继承"></a>五、继承</h4><ol><li><p>创建子类对象时，不论使用子类的那个构造器，默认情况下都会调用父类的无参构造器，若父类没有提供无参构造器，则必须在子类的构造器中用super去指定父类中的构造器（如<code>super(String name,int age);</code>）以完成父类的初始化，否则编译不通过。</p></li><li><p>若希望指定去调用父类的某个构造器时，需要显式的调用一下：<code>super(参数列表)</code>。</p></li><li><p><code>super()</code>在使用时，必须放在构造器第一行(<code>this()</code>也是)，故两方法不能共存于同一个构造器中。</p></li><li><p><code>super()</code>和<code>this()</code>的区别：</p><ul><li><p><code>super()</code>访问父类中和子类<strong>重名</strong>的属性，若不重名，则和<code>this()</code>功能一致。</p></li><li><p><code>super()</code>直接访问父类中的属性（方法），<code>this()</code>先在本类中找属性（方法），再去父类中找属性（方法）。</p></li></ul></li><li><p>方法重载<code>overload</code>和方法重载<code>override</code>的比较：</p><ul><li>重载发生在子类，方法名一样，形参类别、个数或顺序至少有一个不同，返回类型和修饰符无要求；</li></ul></li></ol><ul><li>重写发生在父子类，方法名一样，形参类别、个数或顺序都相同，子类重写的方法的返回类型和父类返回类型一致或是其子类，子类的权限不能小于父类。</li></ul><h4 id="六、多态"><a href="#六、多态" class="headerlink" title="六、多态"></a>六、多态</h4><h5 id="方法的多态"><a href="#方法的多态" class="headerlink" title="方法的多态"></a>方法的多态</h5><ul><li>方法的重载和重写。</li></ul><h5 id="对象的多态"><a href="#对象的多态" class="headerlink" title="对象的多态"></a>对象的多态</h5><ul><li>一个对象的编译类型(<code>"="左边</code>)和运行类型(<code>"="右边</code>)可以不一致。</li></ul><h5 id="多态的向上转型"><a href="#多态的向上转型" class="headerlink" title="多态的向上转型"></a>多态的向上转型</h5><ul><li><p>本质：父类的引用指向子类的对象；</p></li><li><p><strong>语法：父类类型    引用名  =  new  子类类型();</strong></p></li><li><p>特点：编译看左边，运行看右边；</p></li><li><p><strong>不能调用子类特有的成员。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向上转型</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据就近原则先去Animal中找相应的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="多态的向下转型"><a href="#多态的向下转型" class="headerlink" title="多态的向下转型"></a>多态的向下转型</h5><ul><li><p><strong>语法：子类类型    引用名  =  new  父类类型();</strong></p></li><li><p>只能强转父类的引用，不能强制父类的对象(对象创建后不再改变)；</p></li><li><p>当向下转型后，可以调用子类类型中的所有成员；</p></li><li><p>要求父类的当前引用必须指向的是当前目标类型的对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此时animal是指向cat类型的对象</span><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span><span class="token comment">//编译类型和运行类型都是Cat</span><span class="token class-name">Dog</span> <span class="token operator">=</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span><span class="token comment">//编译通过，运行报错，违反要求：要求父类的当前引用必须指向的是当前目标类型的对象。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="属性的“重写”"><a href="#属性的“重写”" class="headerlink" title="属性的“重写”"></a>属性的“重写”</h5><ol><li><p>属性无“重写”之说，属性只看<strong>编译类型</strong>，即“=”左边。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10（编译类型为A，找A的属性）</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> extend <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>instenceof</code>比较操作符，用于判断对象的<strong>运行类型</strong>是否为xx类型或xx类型的子类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行类型为B</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b instenceof <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b instenceof <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行类型为B</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a instenceof <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a instenceof <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//运行类型为Object</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>obj instenceof <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> extend <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h5><ul><li><p>当调用对象方法时，该方法会与该对象的内存地址/<strong>运行类型</strong>绑定；</p><p>(即若调用的方法子类没有而父类有，则先找到父类方法执行，但此时在父类方法中又需要执行子类和父类都有的方法时，需要看该对象的运行类型是哪个类，就执行那个类中的方法。<em>重名的方法和对象的运行类型动态绑定</em>)</p></li><li><p>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用。</p></li></ul><h5 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h5><ul><li><p>调用共有方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个Person对象数组</span>persons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环遍历多态数组，调用say方法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> persons<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//此时需要注意动态绑定机制，编译类型都为Person，运行类型根据实际情况看</span>    persons<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用特有方法(使用类型判断  +  向下转型)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> persons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个Person对象数组</span>persons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//循环遍历多态数组，调用say方法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> persons<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>persons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>persons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向下转型</span>        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//((Student)persons[i]).study();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h5><ul><li><p>方法定义的形参参数类型为父类类型，实参类型可以为子类类型]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Syudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getName</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实参为student(子类)</span><span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//形参为Person(父类)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="七、Object类详解"><a href="#七、Object类详解" class="headerlink" title="七、Object类详解"></a>七、Object类详解</h4><h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a><code>equals</code>方法</h5><ol><li><p><code>==</code>和<code>equals</code>的对比</p><ul><li><code>==</code>既可以判断基本类型，又可以判断引用类型；</li><li><code>==</code>若判断基本类型(如比较数值大小时)，判断的是值是否相等；</li><li><code>==</code>若判断引用类型(如比较两对象时)，判断的是地址是否相等，即判断是否为同一个对象；</li><li><code>equals</code>是Object类中的方法，只能判断引用类型；</li><li><code>equals</code>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。</li></ul></li><li><p>举例：Person类中equals方法的重写</p><p><strong>Person类中的equals重写，判断两对象地址或属性是否一样</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person p2 = p1;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//Person类中的equals重写，判断两对象地址或属性是否一样</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>age <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a><code>hashCode</code></h5><ol><li><code>hashCode</code>的几点小结<ul><li>提高具有哈希结构的容器的效率；</li><li>两个引用，如果指向的时同一个对象，则哈希值肯定是一样的，否则不一样；</li><li>哈希值主要根据地址号来来的，不能完全将哈希值等价于地址；</li><li><code>hashCode</code>也会重写。</li></ul></li></ol><h5 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a><code>toString</code>方法</h5><ol><li><p>默认返回：全类名+@+哈希值的16进制，子类往往重写<code>toString</code>方法，用于返回对象的属性信息；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>p1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：demo.Person@49e4cb85 1239731077</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重写<code>toString</code>方法，打印对象或者拼接对象时，都会自动调用该对象的<code>toString</code>形式；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>p1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：Person{name='a', age=10} 1945604815</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//重写toString方法，输出对象的属性</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//重写后，一般输出对象的属性值，当然也可以自己定制</span><span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span><span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span><span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当直接输出一个对象时，<code>toString方</code>法会被默认调用。(如：<code>System.out.println(Person);</code>就会默认调用<code>Person.toString()</code>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于System.out.println(p1.toString());</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="Java面向对象高级"><a href="#Java面向对象高级" class="headerlink" title="Java面向对象高级"></a>Java面向对象高级</h1><h4 id="一、-类变量和类方法"><a href="#一、-类变量和类方法" class="headerlink" title="一、 类变量和类方法"></a>一、 类变量和类方法</h4><h5 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h5><ol><li><p>定义语法：<code>访问修饰符 static 数据类型 变量名</code>(推荐)或<code>static 访问修饰符 数据类型 变量名</code>；</p></li><li><p>访问方法：<code>类名.类变量名</code>(推荐)或者<code>对象名.类变量名</code>；</p></li><li><p>类变量是被类声明的所有对象共享的，实例对象是对象独有的；</p></li><li><p>类变量在类加载的时候生成，即对象未创建是也可使用；</p></li><li><p><strong>jdk8</strong>以前类变量存放在<strong>方法区</strong>，jdk8以后类变量放在<strong>堆</strong>里；</p></li></ol><h5 id="类方法（静态方法）"><a href="#类方法（静态方法）" class="headerlink" title="类方法（静态方法）"></a>类方法（静态方法）</h5><ol><li><p>定义语法：<code>访问修饰符 static 数据返回类型 方法名(){}</code>(推荐)或<code>static 访问修饰符 数据返回类型 方法名(){}</code>；</p></li><li><p>调用方法：<code>类名.类方法名</code>(推荐)或者<code>对象名.类方法名</code>；</p></li><li><p>使用场景：将一些通用的方法设计成静态类，可以不创建对象就调用相关方法，如<code>Math.sqrt()</code>；</p></li><li><p>类方法和普通方法都是随着类的加载而加载，将结构信息储存在方法区，但类方法中无<code>this()</code>，普通方法中隐含<code>this()</code>；</p></li><li><p>类方法不允许使用和对象有关的关键字，如<code>super()</code>和<code>this()</code>，普通方法可以；</p></li><li><p>静态方法只能访问静态成员，而普通成员方法，既可以访问普通变量(方法)，也可以访问静态变量(方法)。</p></li></ol><h4 id="二、main方法语法"><a href="#二、main方法语法" class="headerlink" title="二、main方法语法"></a>二、<code>main</code>方法语法</h4><ol><li><p>解释<code>main</code>方法的形式：<code>public static void main(String[] args){}</code></p><ul><li><code>main</code>方法是虚拟机调用；</li><li>Java虚拟机需要调用类的<code>main()</code>方法，所以该方法的访问权限必须是<code>public</code>；</li><li>Java虚拟机在执行<code>main()</code>方法时不必创建对象，所以方法必须是<code>static</code>；</li><li>该方法接收String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数，即<code>java 执行的程序 参数1 参数2 参数3 ...</code>。</li></ul><p>有以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个参数为："</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在命令行编译执行观察参数：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/202204022018469.png" alt="image-20220322115013733"></p></li></ol><h4 id="三、代码块"><a href="#三、代码块" class="headerlink" title="三、代码块"></a>三、代码块</h4><ol><li>代码块相当于另一种形式的构造器(对构造器的补充机制)，可做初始化的操作；</li><li>代码块先于构造器加载；</li><li>静态代码块只在类加载时执行一次，普通代码块每创建一次对象就执行一次；</li><li>当只使用某个类的静态成员(未创建该类对象)时，该类的普通代码块不会被执行，但只要加载类时，静态代码块都会执行一次；</li><li>类什么时候加载：<ul><li>创建对象实例时(new)</li><li>创建子类对象实例，父类会被加载，即先加载父类(及其代码块或构造器)，再加载子类(及其代码块或构造器)</li><li>使用类的静态成员时(静态属性、静态成员)</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">A</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token class-name">String</span> b<span class="token punctuation">;</span><span class="token comment">//静态代码块</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块只执行一次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//普通代码块</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出公共代码。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块无论放在哪个位置，都优先加载。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通代码块每创建一次对象就执行一次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println("输出公共代码。");</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println("输出公共代码。");</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：静态代码块只执行一次！输出公共代码。代码块无论放在哪个位置，都优先加载。普通代码块每创建一次对象就执行一次！12=======================输出公共代码。代码块无论放在哪个位置，都优先加载。普通代码块每创建一次对象就执行一次！Hello */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、类中调用的顺序-重点补充"><a href="#四、类中调用的顺序-重点补充" class="headerlink" title="四、类中调用的顺序(重点补充)"></a>四、类中调用的顺序(重点补充)</h4><ol><li><p>在继承的类中，构造器的前面其实隐含了<code>super()</code>和普通代码块，故调用顺序为<code>父类中的代码块-&gt;父类中的构造器-&gt;子类中的代码块-&gt;子类中的构造器</code>，示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token comment">//父类Object</span><span class="token punctuation">{</span><span class="token comment">//super()</span><span class="token comment">//普通代码块</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的代码块被调用。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的构造器被调用。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token comment">//super() 即父类A</span><span class="token comment">//普通代码块</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B的普通代码块被调用。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B的构造器被调用。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：A的代码块被调用。A的构造器被调用。B的普通代码块被调用。B的构造器被调用。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个对象时，在一个类中调用的顺序是：</p><ul><li>调用静态代码块和静态属性初始化(两者优先级相同，若有多个，则按照定义顺序调用)</li><li>普通代码块和普通属性的初始化(两者优先级相同，若有多个，则按照定义顺序调用)</li><li>调用构造器方法</li></ul></li><li><p><strong>创建一个子类对象时(继承关系)，调用顺序是：</strong></p><ul><li><strong>父类</strong>的静态代码块和静态属性(优先级一样，按定义顺序执行)</li><li><strong>子类</strong>的静态代码块和静态属性(优先级一样，按定义顺序执行)</li><li><strong>父类</strong>的普通代码块和普通属性(优先级一样，按定义顺序执行)</li><li><strong>父类</strong>的构造方法</li><li><strong>子类</strong>的普通代码块和普通属性(优先级一样，按定义顺序执行)</li><li><strong>子类</strong>的构造方法</li></ul></li><li><p><em>补充</em>：静态代码块只能调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员(包括静态成员)。</p></li></ol><h4 id="五、单例设计模式"><a href="#五、单例设计模式" class="headerlink" title="五、单例设计模式"></a>五、单例设计模式</h4><blockquote><p>设计模式：是在大量的实践中总结和理论化后优选的代码结构、编程风格以及解决问题的思考方式。</p></blockquote><hr><blockquote><p>单例设计模式：采取一定的方法保证在整个软件系统中，对某个类只能存在<strong>一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p><p>单例模式有两种方式：饿汉式和懒汉式(<strong>都要保证对象的唯一性</strong>)</p></blockquote><h5 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式(线程安全)"></a>饿汉式(<strong>线程安全</strong>)</h5><ul><li>饿汉式在类加载时创建对象实例；</li><li>饿汉式是不论是否要用某个对象，先将该对象创建好，故可能会出现多余对象，造成资源的浪费；</li><li>饿汉式线程安全。</li></ul><h5 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(<strong>线程不安全</strong>)</h5><ul><li>懒汉式在使用对象时才会创建对象实例；</li><li>懒汉式是先定义唯一的对象，然后在调用对象时再创建对象，不会出现多余对象浪费资源的情况；</li><li>懒汉式线程不安全。</li></ul><p><strong>演示代码<code>SingleTon.java</code>：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">CodeBase<span class="token punctuation">.</span>SingleTon</span><span class="token punctuation">;</span><span class="token comment">//饿汉式</span><span class="token comment">/*步骤：    1.将构造器私有化    2.在类的内部直接创建对象(该对象是static)    3.提供一个公共的static方法，返回创建好的对象 */</span><span class="token keyword">class</span> <span class="token class-name">SingleTon_1</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//先创建一个私有的静态对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon_1</span> singleTon_1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon_1</span><span class="token punctuation">(</span><span class="token string">"饿汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//构造器私有</span>    <span class="token keyword">private</span> <span class="token class-name">SingleTon_1</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//公共静态方法返回创建好的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon_1</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleTon_1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//懒汉式</span><span class="token comment">/*步骤：    1.构造器私有化    2.先定义一个static对象，但不创建    3.定义一个public的static方法，可以返回一个对象 */</span><span class="token keyword">class</span> <span class="token class-name">SingleTon_2</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//先定义一个对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon_2</span> singleTon_2<span class="token punctuation">;</span>    <span class="token comment">//构造器私有</span>    <span class="token keyword">private</span> <span class="token class-name">SingleTon_2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//定义返回对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingleTon_2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleTon_2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            singleTon_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon_2</span><span class="token punctuation">(</span><span class="token string">"懒汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleTon_2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============正常情况下============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleTon_Test</span> singleTon_test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon_Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleTon_test<span class="token punctuation">.</span><span class="token function">singleTon1_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleTon_test<span class="token punctuation">.</span><span class="token function">singleTon2_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//测试对象是否位唯一</span><span class="token keyword">class</span> <span class="token class-name">SingleTon_Test</span> <span class="token punctuation">{</span>    <span class="token comment">//测试饿汉式对象</span>    <span class="token keyword">void</span> <span class="token function">singleTon1_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">SingleTon_1</span> test_singleTon_1_1 <span class="token operator">=</span> <span class="token class-name">SingleTon_1</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleTon_1</span> test_singleTon_1_2 <span class="token operator">=</span> <span class="token class-name">SingleTon_1</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test_singleTon_1_1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉式对象一地址："</span> <span class="token operator">+</span> test_singleTon_1_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉式对象二地址："</span> <span class="token operator">+</span> test_singleTon_1_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//测试懒汉式对象</span>    <span class="token keyword">void</span> <span class="token function">singleTon2_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">SingleTon_2</span> test_singleTon_2_1 <span class="token operator">=</span> <span class="token class-name">SingleTon_2</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleTon_2</span> test_singleTon_2_2 <span class="token operator">=</span> <span class="token class-name">SingleTon_2</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test_singleTon_2_1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式对象一地址："</span> <span class="token operator">+</span> test_singleTon_2_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式对象二地址："</span> <span class="token operator">+</span> test_singleTon_2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：    饿汉式    饿汉式对象一地址：CodeBase.SingleTon.SingleTon_1@22f71333    饿汉式对象二地址：CodeBase.SingleTon.SingleTon_1@22f71333    ==========================    懒汉式    懒汉式对象一地址：CodeBase.SingleTon.SingleTon_2@6aaa5eb0    懒汉式对象二地址：CodeBase.SingleTon.SingleTon_2@6aaa5eb0 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多线程情况下的饿汉式和懒汉式"><a href="#多线程情况下的饿汉式和懒汉式" class="headerlink" title="多线程情况下的饿汉式和懒汉式"></a>多线程情况下的饿汉式和懒汉式</h5><p><strong>未加线程锁演示代码<code>Thread_SingleTon.java</code>：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">CodeBase<span class="token punctuation">.</span>SingleTon</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread_SingleTon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============多线程情况下============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread_SingleTon_Test<span class="token punctuation">.</span>Thread_Test_SingleTon_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread_SingleTon_Test<span class="token punctuation">.</span>Thread_Test_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//多线程饿汉式</span><span class="token keyword">class</span> <span class="token class-name">Thread_SingleTon_1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//让线程停一会方便观察</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 饿汉式："</span><span class="token operator">+</span> <span class="token class-name">SingleTon_1</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//多线程懒汉式</span><span class="token keyword">class</span> <span class="token class-name">Thread_SingleTon_2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 懒汉式："</span> <span class="token operator">+</span> <span class="token class-name">SingleTon_2</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Thread_SingleTon_Test</span><span class="token punctuation">{</span>    <span class="token comment">//为饿汉式创建2个线程</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Thread_Test_SingleTon_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread_SingleTon_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread_SingleTon_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启线程</span>        one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//为懒汉式创建2个线程</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Thread_Test_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启线程</span>        one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出(一种情况):饿汉式为同一个对象，懒汉式为不同的对象    =============多线程情况下============    Thread-1 饿汉式：CodeBase.SingleTon.SingleTon_1@3f58200d    Thread-0 饿汉式：CodeBase.SingleTon.SingleTon_1@3f58200d    Thread-2 懒汉式：CodeBase.SingleTon.SingleTon_2@59355dd6    Thread-3 懒汉式：CodeBase.SingleTon.SingleTon_2@61034766*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多线程中懒汉式的改进"><a href="#多线程中懒汉式的改进" class="headerlink" title="多线程中懒汉式的改进"></a>多线程中懒汉式的改进</h5><ul><li>为每个对象设置一个“互斥锁”，这表明，在每一个时刻只有一个线程持有该互斥锁，而其他线程若要获得该互斥锁，必须等到该线程（持有互斥锁的线程）将其释放。</li><li>为了使用这个“互斥锁”，在JAVA语言中提供了<code>synchronized</code>关键字，这个关键字即可修饰函数，也可以修饰代码，实际上可以将其理解为就是一个锁，当一个线程执行该临界代码的时候，用<code>synchronized</code>给该线程先上锁，其它线程进不来，当线程代码执行完了的时候有释放该锁，只不过释放锁是隐式的不需要显示的指明，随代码的执行完毕，锁自动的被释放；</li><li><code>volatile</code>关键字可以禁止指令重排。</li></ul><p><strong>演示代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">CodeBase<span class="token punctuation">.</span>SingleTon</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread_SingleTon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============改进懒汉式=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread_SingleTon_Test<span class="token punctuation">.</span>Test_Fix_Thread_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//多线程懒汉式改进</span><span class="token keyword">class</span> <span class="token class-name">Fix_SingleTon_2</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//先定义一个对象</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Fix_SingleTon_2</span> fix_singleTon_2<span class="token punctuation">;</span> <span class="token comment">//第二层锁，volatile关键字禁止指令重排</span>    <span class="token comment">//构造器私有</span>    <span class="token keyword">private</span> <span class="token class-name">Fix_SingleTon_2</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//定义返回对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Fix_SingleTon_2</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fix_singleTon_2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//第一层检查，检查是否有引用指向对象，高并发情况下会有多个线程同时进入</span>        <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Fix_SingleTon_2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">//双重检查，防止多个线程同时进入第一层检查(因单例模式只允许存在一个对象，故在创建对象之前无引用指向对象，所有线程均可进入第一层检查)</span>                <span class="token comment">//假设没有第二层检查，那么第一个线程创建完对象释放锁后，后面进入对象也会创建对象，会产生多个对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fix_singleTon_2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    fix_singleTon_2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fix_SingleTon_2</span><span class="token punctuation">(</span><span class="token string">"多线程懒汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fix_singleTon_2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//多线程改进懒汉式</span><span class="token keyword">class</span> <span class="token class-name">Fix_Thread_SingleTon_2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 改进懒汉式："</span> <span class="token operator">+</span> <span class="token class-name">Fix_SingleTon_2</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Thread_SingleTon_Test</span><span class="token punctuation">{</span>    <span class="token comment">//为改进后的懒汉式创建2个线程</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Test_Fix_Thread_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token class-name">Thread</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fix_Thread_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Thread</span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fix_Thread_SingleTon_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//开启线程</span>         one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>         two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//此时对象唯一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="六、final关键字"><a href="#六、final关键字" class="headerlink" title="六、final关键字"></a>六、<code>final</code>关键字</h4><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>不希望类被继承时；</li><li>不希望父类的某个方法被子类覆盖、重写时；</li><li>不希望类中某个属性的值被修改时；</li><li>不希望某个局部变量被修改时。</li></ul><h5 id="注意事项及细节讨论"><a href="#注意事项及细节讨论" class="headerlink" title="注意事项及细节讨论"></a>注意事项及细节讨论</h5><ul><li><p><code>final</code>修饰的属性又叫常量，一般用<code>XX_XX_XX</code>命名；</p></li><li><p><code>final</code>修饰的属性在定义是赋初值，并且不能再修改，赋值可以在下列位置：</p><ul><li>定义时：如<code>public final double TAX_RATE=0.08</code>；</li><li>在构造器中；</li><li>在代码块中。</li></ul></li><li><p>若<code>final</code>修饰的属性时<strong>静态</strong>的，则初始化的位置只能在<strong>定义时</strong>和在<strong>静态代码块中</strong>，不能在构造器中赋值；</p></li><li><p><code>final</code>类不能继承，但可以实例化对象；</p></li><li><p>如类不是<code>final</code>类，但类里有<code>final</code>方法，则该方法不能被重写，但类可以被继承；</p></li><li><p>一般来说，若一个类已经是<code>final</code>类，则不需要在此类中写<code>final</code>方法；</p></li><li><p><code>final</code>不能修饰构造器；</p></li><li><p><code>final</code>往往和<code>static</code>配合使用，效率更高，底层编译器做了优化：</p><blockquote><p>如下代码：</p><ul><li>直接访问<code>static final</code>定义的属性时，编译时就知道了a的值，所以直接访问不会初始化<code>Final</code>类，即<code>static</code>代码块不会被加载；</li><li>当<code>static final</code>定义的属性需要某个方法来获取时，编译时无法知道b的值，只有运行时才能知道，所以在访问b的值时，需要先初始化类，即<code>static</code>代码块会被加载。</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直接访问static final定义的属性："</span><span class="token operator">+</span><span class="token class-name">Final</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问static final定义的方法："</span><span class="token operator">+</span><span class="token class-name">Final</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Final</span> <span class="token comment">//父类Object</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final类被加载。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：直接访问static final定义的属性：10=======================Final类被加载。访问static final定义的方法：20 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>包装类(<code>Integer,Double,Float,Boolean</code>)等都是<code>final</code>类，<code>String</code>也是<code>final</code>类。</p></li></ul><h4 id="七、抽象类和抽象方法"><a href="#七、抽象类和抽象方法" class="headerlink" title="七、抽象类和抽象方法"></a>七、抽象类和抽象方法</h4><h5 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h5><ul><li>形式：<code>abstract class A{}</code>和<code>public abstract void B()</code>；</li><li>当父类方法不确定时，考虑将该方法设计为抽象方法；</li><li>所谓抽象方法就是没有实现的方法，即没有方法体；</li><li>当一个类中存在抽象方法时，需要将该类声明为抽象方法；</li><li>一般来说，抽象类会被继承，由子类实现其抽象方法。</li></ul><h5 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h5><ul><li>抽象类不能被实例化；</li><li>抽象类不一定包含抽象方法。包含抽象方法的类必须为抽象类；</li><li><code>abstract</code>只能修饰方法和类；</li><li>抽象类可以有任意成员，如非抽象方法、构造器、静态属性等；</li><li>若一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为抽象类；</li><li>抽象方法不能用<code>private,final,static</code>修饰，因为这些关键字都是和重写相违背的。</li></ul><h4 id="八、接口"><a href="#八、接口" class="headerlink" title="八、接口"></a>八、接口</h4><h5 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h5><ul><li><p>接口相当于提供了一个规范；</p></li><li><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用时，在实现这些方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> 接口名<span class="token punctuation">{</span>    <span class="token comment">//属性</span>    <span class="token comment">//方法</span><span class="token punctuation">}</span><span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口<span class="token punctuation">{</span>    <span class="token comment">//自己属性</span>    <span class="token comment">//自己方法</span>    <span class="token comment">//必须实现接口的抽象方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在jdk7.0以前，接口中所有方法都没有方法体，都是抽象方法；jdk8.0后，接口中可以有静态方法(<code>static</code>)和默认方法(<code>default</code>)，即接口中可以有方法的具体实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment">//抽象方法可以省略abstract</span>    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//默认方法</span>    <span class="token keyword">default</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h5><ul><li>接口不能被实例化；</li><li>接口中所有方法都是<code>public</code>，接口中抽象方法可以不用使用<code>abstract</code>；</li><li>一个普通类实现接口，必须将接口中所有方法实现；</li><li>抽象类实现接口时，可以不用实现接口抽象方法；</li><li>一个类可以同时实现多个接口，逗号间隔两个接口(<code>class A implements IB,IC</code>)；</li><li>接口中的属性只能是<code>final</code>的，而且是<code>public final static</code>修饰的，如<code>int a = 1;</code>，实际上是<code>public final static int a = 1;</code>即必须初始化；</li><li>接口中的属性访问形式：<code>接口名.属性</code>(静态属性访问)；</li><li>一个接口不能继承其他的类，但能继承其他的接口：<code>interface A extend B,C{}</code>；</li><li>接口的修饰符只能是public和默认。</li></ul><h5 id="接口VS-继承"><a href="#接口VS-继承" class="headerlink" title="接口VS.继承"></a>接口VS.继承</h5><blockquote><ul><li>继承相当于<strong>父子关系</strong>，子类生来就有(自动拥有)父类的一些属性和方法；而接口相当于<strong>师徒关系</strong>，某个类若想拥有某个接口的方法，则必须去学习(实现接口中方法)。</li><li>如子类需要拓展功能，可以通过实现接口的方式，实现接口可以理解为对java单继承机制的一种补充。</li></ul></blockquote><ul><li>解决问题不同<ul><li>继承：主要提高代码的复用性和可拓展性；</li><li>接口：设计、设计好各种规范(方法)，让其他人去实现这些方法；</li></ul></li><li>接口比继承更加灵活<ul><li>继承满足<code>is-a</code>的关系，而接口只需要满足<code>like-a</code>的关系；</li></ul></li><li>接口在一定程度上实现代码解耦(即：接口规范性+动态绑定)，低耦合，高内聚。</li></ul><h5 id="接口多态特性"><a href="#接口多态特性" class="headerlink" title="接口多态特性"></a>接口多态特性</h5><ol><li><p>多态参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//接口的多态体现</span><span class="token comment">//接口类型的变量 if01 可以指向实现了接口的对象实例</span><span class="token class-name">IF</span> if01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>if01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继承的多态体现</span><span class="token comment">//父类类型的变量 a 可以指向继承A的子类的对象实例</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> IF<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> IF<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">implements</span> IF<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多态数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*给Usb数组中，存放 Phone 和 Camera 对象，Phone 类还有一个特有的方法 call()，遍历 Usb 数组，如果是 Phone 对象，除了调用 Usb 接口定义的方法外，还要调用 Phone 特有的方法 call()。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//多态数组-&gt; 接口类型数组</span><span class="token class-name">Usb</span> usb<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usb</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>usb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Camera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> usb<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态绑定</span><span class="token comment">//类型判断 （类型的向下转型）</span><span class="token keyword">if</span> <span class="token punctuation">(</span>usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Phone</span><span class="token punctuation">)</span> <span class="token comment">//判断运行类型是否为 Phone</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Phone</span><span class="token punctuation">)</span> usb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向下转型</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机可以打电话。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机工作中。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Camera</span> <span class="token keyword">implements</span> <span class="token class-name">Usb</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"相机工作中。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：手机工作中。手机可以打电话。相机工作中。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="接口多态传递"><a href="#接口多态传递" class="headerlink" title="接口多态传递"></a>接口多态传递</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//多态传递演示</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">IG</span> ig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 如果 IG 继承了 IH 接口，而 Teacher 实现了　IG　接口，   那么相当于 Teacher 实现了　IH　接口，这就是多态的传递 */</span><span class="token class-name">IH</span> ih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> IH<span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> IG <span class="token keyword">extends</span> IH <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> IG<span class="token punctuation">{</span><span class="token comment">//接口可以继承</span><span class="token comment">//当接口IH中有抽象方法时，IG也继承了该方法，故在　Teacher 类中也需要实现方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工作中。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="九、内部类"><a href="#九、内部类" class="headerlink" title="九、内部类"></a>九、内部类</h4><blockquote><p>类的五大成员：属性、方法、构造器、代码块、内部类。</p><p>内部类最大特点就是可以访问私有属性。</p></blockquote><h5 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h5><ol><li><p>定义在外部类局部位置上(如方法内)</p><ul><li>局部内部类（有类名）</li><li><strong>匿名内部类（无类名）</strong></li></ul></li><li><p>定义在外部类的成员位置上</p><ul><li>成员内部类（无<code>static</code>修饰）</li><li>静态内部类（有<code>static</code>修饰）</li></ul></li></ol><h5 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h5><ol><li><p>局部内部类定义在<strong>方法中</strong>或<strong>代码块中</strong>，其本质仍是一个类；</p></li><li><p>可以直接访问外部类的所有成员，包括私有的；</p></li><li><p>不能添加访问修饰符，因为它的地位是一个局部变量，局部变量不能访问修饰符的，但可以使用<code>final</code>修饰，以保证其不被继承，因为局部变量也可以使用<code>final</code>;</p></li><li><p>作用域：仅在定义它的方法或代码块中；</p></li><li><p>局部内部类访问局部内部类成员：直接访问；</p></li><li><p>外部类(内部类之外的第一个类)的方法中访问局部内部类成员：创建对象，再访问；</p></li><li><p>外部其他类(外部类之外的类)不能访问局部内部类；</p></li><li><p>若外部类和局部内部类的成员重名时，默认遵循就近一致原则，如果向访问外部类的成员，使用<code>外部类.this.成员</code>去访问，如下代码演示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span> <span class="token comment">//外部其他类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"outer对象的hashcode："</span><span class="token operator">+</span>outer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token comment">//外部类</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//方法</span><span class="token punctuation">{</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//就近一致原则，访问局部内部类的 n1=200</span><span class="token comment">//此时 Outer.this 相当于一个对象(调用m1方法的对象，此时为outer)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//访问外部类的 n1=100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outer.this对象的hashcode："</span><span class="token operator">+</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：n1=200n1=100Outer.this对象的hashcode：demo.Outer@7a5d012couter对象的hashcode：demo.Outer@7a5d012c */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><ol><li><p>本质详解</p><blockquote><p>有两个需求：</p><ul><li>需求1：使用IA接口，实现接口内方法<br>传统方法：单独用类实现接口方法，并创建对象，如tiger1</li><li>需求2：Tiger类只使用一次，后面不再使用，单独定义一个类浪费资源<br>解决方法：使用匿名内部类简化，如tiger2</li></ul></blockquote><p>解决代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token comment">//外部类</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//方法</span><span class="token punctuation">{</span><span class="token comment">//需求1</span><span class="token class-name">Tiger</span> tiger1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tiger1<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需求2：使用匿名类</span><span class="token class-name">IA</span> tiger2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(匿名类)老虎叫。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//IA tiger2 = () -&gt; System.out.println("(匿名类)老虎叫。。。");</span>tiger2<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> IA<span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//需求1</span><span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">implements</span> IA<span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(实现接口)老虎叫。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：(实现接口)老虎叫。。。(匿名类)老虎叫。。。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><ul><li><p>tiger2的的编译类型是IA，运行内存就是匿名内部类；</p></li><li><p>内部匿名类的底层：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span>$<span class="token number">1</span> <span class="token keyword">implements</span> IA <span class="token comment">//Outer$1是系统分配的名称</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(匿名类)老虎叫。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Jdk底层在创建匿名内部类 Outer$1后，立即创建了Outer$1实例，并把地址返回给tiger2;</p></li><li><p>匿名内部类只使用一次就不再使用(对象可以多次使用)。</p></li></ul></li><li><p>匿名内部类的使用</p><ul><li><p>基于类的匿名内部类</p><ul><li><p><code>father</code>编译类型是<code>Father</code>，运行类型是<code>Outer$1</code>(匿名内部类)；</p></li><li><p>底层会创建匿名内部类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span>$<span class="token number">1</span> extend <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写 Father中speak方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时也直接返回了匿名内部类<code>Outer$1</code>的对象。</p></li></ul><p>如下代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token comment">//外部类</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//方法</span><span class="token punctuation">{</span><span class="token comment">//基于类的匿名内部类</span><span class="token class-name">Father</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//匿名内部类也可使用构造器，Jack传递给构造器</span><span class="token annotation punctuation">@Override</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写 Father中speak方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father对象的运行类型："</span><span class="token operator">+</span>father<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>father<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于抽象类的匿名内部类</span><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物吃东西。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到的名字："</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*输出：接收到的名字：Jackfather对象的运行类型：class demo.Outer$1匿名内部类重写 Father中speak方法动物吃东西。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用细节</p><ul><li><p>调用可以动态绑定调用，也可以直接调用，内部类本身就会返回对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//动态绑定调用</span><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物吃"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"草"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接调用</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回对象</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物吃"</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"草"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以访问外部类的所有成员，包括私有成员；</p></li><li><p>匿名内部类访问外部类成员：直接访问；</p></li><li><p>外部其他类(外部类之外的类)不能访问局部内部类；</p></li><li><p>若外部类和局部内部类的成员重名时，默认遵循就近一致原则，如果向访问外部类的成员，使用<code>外部类.this.成员</code>去访问</p></li></ul></li><li><p>应用场景</p><ul><li>当作实参直接传递，如下代码演示：</li></ul><p>代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*需求：实现一个多功能闹钟，可以提醒不同事件解决方法：1. 接口实现：代码繁杂        2. 内部匿名类当作实参  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token comment">//外部类</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//方法</span><span class="token punctuation">{</span><span class="token class-name">CellPhone</span> cellPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CellPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类直接当实参传递</span><span class="token class-name"><span class="token namespace">cellPhone<span class="token punctuation">.</span></span>SmartClock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"起床了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">cellPhone<span class="token punctuation">.</span></span>SmartClock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上课了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Clock</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CellPhone</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">SmartClock</span><span class="token punctuation">(</span><span class="token class-name">Clock</span> clock<span class="token punctuation">)</span><span class="token punctuation">{</span>clock<span class="token punctuation">.</span><span class="token function">ring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态绑定</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：起床了。上课了。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><ol><li><p>定义在外部类的成员位置；</p></li><li><p>可以直接访问外部类的所有成员，包含私有的；</p></li><li><p>可以添加任意访问修饰符，因为它的地位就是类的一个成员；</p></li><li><p>作用域：和外部类的其他成员一样，作用域为整个外部类体；</p></li><li><p>成员内部类访问外部类：直接访问；</p></li><li><p>外部类访问内部类：创建对象再访问；</p></li><li><p>若外部类和局部内部类的成员重名时，默认遵循就近一致原则，如果向访问外部类的成员，使用<code>外部类.this.成员</code>去访问；</p></li><li><p>外部其他类访问成员内部类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*需求：外部其他类访问成员内部类成员 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//方法1：相当于把new Inner()当作是outer的成员</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner1 <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法2：在外部类中，编写一个方法，可以返回Inner对象</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner2 <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token comment">//外部类</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员内部类输出。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//方法2中获取对象的方法</span><span class="token keyword">public</span> <span class="token class-name">Inner</span> <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回Inner类型的方法</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：成员内部类输出。成员内部类输出。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><ol><li><p>定义在外部类的成员位置，并且有<code>static</code>修饰；</p></li><li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员；</p></li><li><p>可以添加任意访问修饰符，因为它的地位就是类的一个成员；</p></li><li><p>作用域：和外部类的其他成员一样，作用域为整个外部类体；</p></li><li><p>静态内部类访问外部类：直接访问所有静态成员；</p></li><li><p>外部类访问静态内部类：创建对象再访问；</p></li><li><p>若外部类和局部内部类的成员重名时，默认遵循就近一致原则，如果向访问外部类的成员，使用<code>外部类.成员</code>去访问；</p></li><li><p>外部其他类访问静态内部类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*需求：外部其他类访问静态内部类成员 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//方法1：静态成员可以直接通过 类名.成员 访问(满足访问权限时)</span><span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法2：在外部类中，编写一个方法，可以返回Inner对象实例</span><span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner2 <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当getInner()为静态时，也可应直接用类名访问，如下</span><span class="token comment">//Outer.getInner().say();</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token comment">//外部类</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类输出。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//方法2中获取对象的方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Inner</span> <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//返回Inner类型的方法</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*输出：静态内部类输出。静态内部类输出。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对多态的简单理解</title>
      <link href="posts/946c.html"/>
      <url>posts/946c.html</url>
      
        <content type="html"><![CDATA[<h1 id="对多态的简单理解"><a href="#对多态的简单理解" class="headerlink" title="对多态的简单理解"></a>对多态的简单理解</h1><blockquote><p><strong>多态不能对子类的属性起作用</strong></p></blockquote><p>通过代码了解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">deom</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 多态 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>多态 duo <span class="token operator">=</span> <span class="token keyword">new</span> 多态<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Animals animals = new Dog(); 父类引用子类的对象，调用子类重写的父类的方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Animals animals = new Cat(); 父类引用子类的对象，调用子类重写的父类的方法</span><span class="token punctuation">}</span><span class="token comment">//使用多态时写的函数</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Animals</span> animals<span class="token punctuation">)</span><span class="token punctuation">{</span>animals<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>animals<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态不能对子类的属性起作用</span><span class="token punctuation">}</span><span class="token comment">//不使用多态时写的函数（实现相同功能）</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">{</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">)</span><span class="token punctuation">{</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//由此可见，使用多态可以增加代码的复用性</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物吃东西。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物叫。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小猫吃鱼。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵喵！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗吃肉。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">////输出：</span><span class="token comment">//小狗吃肉。</span><span class="token comment">//汪汪汪！</span><span class="token comment">//***********</span><span class="token comment">//小猫吃鱼。</span><span class="token comment">//喵喵喵！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04的初体验</title>
      <link href="posts/8f7a.html"/>
      <url>posts/8f7a.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、预备工作"><a href="#一、预备工作" class="headerlink" title="一、预备工作"></a>一、预备工作</h1><h2 id="1-下载VMware并安装"><a href="#1-下载VMware并安装" class="headerlink" title="1. 下载VMware并安装"></a>1. 下载<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html"><strong>VMware</strong></a>并安装</h2><p><del>(许可证：ZF3R0-FHED2-M80TY-8QYGC-NPKYF)</del></p><h2 id="2-下载Ubuntu镜像"><a href="#2-下载Ubuntu镜像" class="headerlink" title="2. 下载Ubuntu镜像"></a>2. 下载<a href="https://ubuntu.com/download/desktop">Ubuntu镜像</a></h2><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/v2-0528c3ad69dfe7d8567e5f4bc99bcc5b_1440w.jpg" alt="Ubuntu20.04"></p><h1 id="二、-新系统调整"><a href="#二、-新系统调整" class="headerlink" title="二、 新系统调整"></a>二、 新系统调整</h1><h2 id="1-软件换源"><a href="#1-软件换源" class="headerlink" title="1. 软件换源"></a>1. 软件换源</h2><ul><li><p>在换源之前，要先对原来的源进行备份，在Ubuntu中，软件源存在/etc/apt/sources.list中，用以下命令备份：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打卡文件 <code>/etc/apt/sources.list</code>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> gedit /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除文件里的内容，并复制要换的源（如阿里源）：</p><pre class="line-numbers language-none"><code class="language-none"># 阿里源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 网易源deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 清华源deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新源</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新软件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>大功告成！</p></li></ul><h1 id="三、番外篇"><a href="#三、番外篇" class="headerlink" title="三、番外篇"></a>三、番外篇</h1><h2 id="1-VMware的完全卸载"><a href="#1-VMware的完全卸载" class="headerlink" title="1. VMware的完全卸载"></a>1. VMware的完全卸载</h2><blockquote><p>Vmware卸载后会有残余，这会导致我们再次安装后出现各种问题，非常麻烦，于是以下是Vmware完全卸载的方法。</p></blockquote><ul><li><p>将Vmware相关的服务停止，如下：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210915225708434.png" alt="image-20210915225708434"></p></li><li><p>删除注册表</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210915231814731.png" alt="image-20210915231814731"></p></li><li><p>在任务管理器结束Vmware相关的进程</p></li><li><p>卸载Vmware程序</p></li><li><p>结束！</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅地用IDEA刷LeetCode</title>
      <link href="posts/ad0e.html"/>
      <url>posts/ad0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何优雅地用IDEA刷LeetCode"><a href="#如何优雅地用IDEA刷LeetCode" class="headerlink" title="如何优雅地用IDEA刷LeetCode"></a>如何优雅地用IDEA刷LeetCode</h1><ol><li><p>点击右上角<code>文件-&gt;设置-&gt;Plugins</code>，搜索leetcode，找到leetcode editor并安装，如下图：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210415210517555.png" alt="image-20210415210517555"></p></li><li><p>在IDEA右侧边点击leetcode，打开插件主界面后打开设置：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210415211241139.png" alt="image-20210415211241139"></p></li><li><p>CodeFileName处填：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">P</span>$<span class="token operator">!</span><span class="token punctuation">{</span>question<span class="token punctuation">.</span>frontendQuestionId<span class="token punctuation">}</span>$<span class="token operator">!</span>velocityTool<span class="token punctuation">.</span><span class="token function">camelCaseName</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>titleSlug<span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CodeTemplate处填：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token namespace">leetcode<span class="token punctuation">.</span>editor<span class="token punctuation">.</span>cn</span><span class="token punctuation">;</span> <span class="token comment">// 此处不要改</span><span class="token comment">//Java：${question.title}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>frontendQuestionId<span class="token punctuation">}</span>$<span class="token operator">!</span>velocityTool<span class="token punctuation">.</span><span class="token function">camelCaseName</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>titleSlug<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P</span>$<span class="token operator">!</span><span class="token punctuation">{</span>question<span class="token punctuation">.</span>frontendQuestionId<span class="token punctuation">}</span>$<span class="token operator">!</span>velocityTool<span class="token punctuation">.</span><span class="token function">camelCaseName</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>question<span class="token punctuation">.</span>titleSlug<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TO TEST</span>    <span class="token punctuation">}</span>    $<span class="token punctuation">{</span>question<span class="token punctuation">.</span>code<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填完之后点应用，确定。</p></li><li><p>然后点如下操作：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210415211744092.png" alt="image-20210415211744092"></p></li><li><p>大功告成，去刷题吧。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自定义排序以及lambda表达</title>
      <link href="posts/3456.html"/>
      <url>posts/3456.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java的自定义排序以及lambda表达"><a href="#Java的自定义排序以及lambda表达" class="headerlink" title="Java的自定义排序以及lambda表达"></a>Java的自定义排序以及lambda表达</h1><p><em>以数组某个元素的大小排序为例：</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token comment">//将大数组中的小数组按照右端点元素大小升序排序</span><span class="token keyword">public</span> <span class="token keyword">class</span> 自定义排序 <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>普通写法 result1 <span class="token operator">=</span> <span class="token keyword">new</span> 普通写法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result1<span class="token punctuation">.</span><span class="token function">zipai</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通写法输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>lambda表达 result2 <span class="token operator">=</span> <span class="token keyword">new</span> lambda表达<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result2<span class="token punctuation">.</span><span class="token function">zipai</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lambda表达写法输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> 普通写法<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zipai</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> o2<span class="token punctuation">)</span> <span class="token comment">//使用Comparator时需要有compare函数</span><span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//升序</span><span class="token comment">// return o2[1]-o1[1]; //降序</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> lambda表达<span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zipai</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//比较负数会越界</span>        <span class="token comment">// Arrays.sort(a,(o1, o2) -&gt; o1[1]&gt;o2[1]?1:-1); 完整写法</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CodeBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决git push速度慢的问题</title>
      <link href="posts/3a4c.html"/>
      <url>posts/3a4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="解决git-push速度慢的问题"><a href="#解决git-push速度慢的问题" class="headerlink" title="解决git push速度慢的问题"></a>解决git push速度慢的问题</h1><blockquote><p>今天更新一篇文章，内容比较多，所以在部署的过程中遇到了push速度慢的问题，即使kx上网全局也无济于事，最后通过查阅一些文章找到了解决方法。</p></blockquote><p>开始时，我用git协议部署，即使kx上网全局也会卡在Writing objects上：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413224633524.png" alt="image-20210413224633524"></p><p>后来查阅资料发现，git可以使用代理，但Windows配置git协议的代理比较麻烦，所以用了https协议来部署（https协议的代理比较容易配置<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413224940881.png" alt="image-20210413224940881"></p><p>现在可以愉快的配置代理了:(</p><pre class="line-numbers language-none"><code class="language-none"># 端口号根据自身情况决定# 需要鉴权git config http.proxy http://username:password@127.0.0.1:1080 # 需要鉴权# 非全局代理git config http.proxy http://127.0.0.1:1080# 全局代理（所有项目）git config --global http.proxy http://127.0.0.1:1080# 查看全局代理git config --get --global http.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了，问题解决了，享受这丝滑吧！<span class="github-emoji"><span>😹</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413225625508.png" alt="image-20210413225625508"></p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github Pages+Vercel搭建博客(详细)</title>
      <link href="posts/c7e2.html"/>
      <url>posts/c7e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-Pages-Vercel搭建博客-详细"><a href="#Hexo-Github-Pages-Vercel搭建博客-详细" class="headerlink" title="Hexo+Github Pages+Vercel搭建博客(详细)"></a>Hexo+Github Pages+Vercel搭建博客(详细)</h1><blockquote><p>本篇文章主要写一些我搭建这个博客的详细过程以及一些踩坑记录。</p><p><strong>持续更新中~~</strong></p></blockquote><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>此博客是采用用<a href="https://hexo.io/zh-cn/">Hexo</a>博客框架搭建的。Hexo是一个由Node.js驱动的快速，简单且功能强大的静态博客框架。它能快速生成由<strong>MarkDown</strong>等渲染的文章，总有数百个主题和插件可供使用，并且支持<strong>一键部署</strong>到Github Pages上。<br>而本博客就是部署到Github Pages上并用<a href="https://vercel.com/">Vercel</a>加速国内访问的(后面会详细说明)，采用了<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题。</p><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><h2 id="1-Node-js环境配置"><a href="#1-Node-js环境配置" class="headerlink" title="1. Node.js环境配置"></a>1. Node.js环境配置</h2><ul><li><p>①首先去<a href="https://nodejs.org/en/download/">Node.js官网</a>下载安装程序，一路默认即可(路径可根据自己的需求更改)，然后安装。</p></li><li><p>②测试是否安装成功及环境变量是否正确。在cmd命令行输入：<code>node -v</code>查看效果。若出现：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413160808990.png" alt="image-20210413160808990"></p><p>则说明环境变量添加完成，进行下一步。如果报错，则需要手动添加环境变量：右击点击我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为 path 的变量名，双击Path，点击添加，将node.js的安装复制进去即可。</p></li><li><p>③改npm的源(将npm的源改为国内镜像了提高访问和下载速度)</p><pre class="line-numbers language-none"><code class="language-none"># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-Git的安装及配置"><a href="#2-Git的安装及配置" class="headerlink" title="2.Git的安装及配置"></a>2.Git的安装及配置</h2><ul><li>①首先去<a href="https://git-scm.com/">Git官网</a>下载安装程序，一路默认Next(有特殊需求可改一些配置)，安装。</li><li>②安装完成后右键桌面会出现两个和Git相关的选项，表示安装成功。</li></ul><h2 id="3-Git连接Github以及配置SSH连接"><a href="#3-Git连接Github以及配置SSH连接" class="headerlink" title="3.Git连接Github以及配置SSH连接"></a>3.Git连接Github以及配置SSH连接</h2><ul><li><p>①Git账户邮箱配置。在桌面点击鼠标右键，点击 <code>Git Bash Here</code>，并分别输入以下命令并回车：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "此处填写你Github的用户名"git config --global user.email "此处填写你Github的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>②SSH连接。在桌面点击鼠标右键，点击 <code>Git Bash Here</code>。输入以下代码并一直回车：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C “your_email@example.com” # 引号里填你的Github注册邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>③提交SSH私钥。在 C:/Users/[Windows用户名] 目录下找到名为.ssh 的文件夹，找到并用记事本打开<code>id_rsa.pub</code>，复制里面的内容。然后到GitHub上点击右上角头像，进入settings：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413161348594.png" alt="image-20210413161348594"></p></li><li><p>④新建SSH密钥：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413161538670.png" alt="image-20210413161538670"></p></li><li><p>⑤添加密钥：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413161824201.png" alt="image-20210413161824201"></p></li></ul><h2 id="4-测试是否连成功"><a href="#4-测试是否连成功" class="headerlink" title="4. 测试是否连成功"></a>4. 测试是否连成功</h2><ul><li>在<code>Git Bush</code>或者<code>cmd</code>输入<code>ssh -T git@github.com</code>，如果出现以下语句则说明连接成功：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413180723039.png" alt="image-20210413180723039"></li></ul><p><strong>注意事项：</strong></p><ol><li><p>仓库名称尽量命名为**(example).github.io**(example)为GitHub账户名，方便Hexo部署；</p></li><li><p>建完仓库后如果分支不是master，则需新建master分支：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413164650054.png" alt="image-20210413164650054"></p></li><li><p>点击仓库的Settings，进入Pages：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413164208605.png" alt="image-20210413164208605"></p></li><li><p>将默认分支设置为master：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413165433792.png" alt="image-20210413165433792"></p></li><li><p>将Page指向master分支后save：</p><p><img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413164758578.png" alt="image-20210413164208605"></p></li><li><p>此时以及可以通过：<code>https://example.github.io</code>(example为GitHub用户名)访问网页了，如果有<code>readme</code>文档则显示<code>readme</code>文档内容，否则显示<strong>404 File not found</strong><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。至此，GitHub Pages页面创建完成。</p></li></ol><h1 id="三、开始搭建博客"><a href="#三、开始搭建博客" class="headerlink" title="三、开始搭建博客"></a>三、开始搭建博客</h1><h2 id="1-建立本地博客站点文件夹"><a href="#1-建立本地博客站点文件夹" class="headerlink" title="1.建立本地博客站点文件夹"></a>1.建立本地博客站点文件夹</h2><ul><li><p>①选定一个磁盘，新建文件夹（如：example），在该文件夹所在目录（不是example文件夹里）右键<code>Git Bush Here</code>,然后依次输入以下命令并等待执行完毕：</p><pre class="line-numbers language-none"><code class="language-none"># hexo框架的安装npm install -g hexo-cli# 等上一个命令完成后，在输入下面的命令hexo init example #（新建文件夹的名称）初始化文件夹cd example #（新建文件夹的名称）npm install  # 安装博客所需要的依赖文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>②执行完毕后进入站点文件夹（example），此时已初始化完成，包含一些文件。右键<code>Git Bush Here</code>,执行以下命令：</p><pre class="line-numbers language-none"><code class="language-none">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后打开浏览器，输入：<code>http://localhost:4000</code>或<code>127.0.0.1:4000</code>即可看到博客在本地的运行。</p></li></ul><h2 id="2-本地博客部署到GitHub上"><a href="#2-本地博客部署到GitHub上" class="headerlink" title="2. 本地博客部署到GitHub上"></a>2. 本地博客部署到GitHub上</h2><ul><li><p>①安装部署插件，在站点文件夹（example）中执行；</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>②修改配置文件。把<code>_config.yml</code>用代码编辑器（如Vscode）打开，修改站点主要的属性：</p><pre class="line-numbers language-none"><code class="language-none">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种，简体中文为：zh-CN   timezone: 时区（可不用填，hexo默认使用电脑时区）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改url：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413220354674.png" alt="image-20210413220354674"></p><p>拉到文件最底部，在 deploy 下面添加一个 repo 项：<img src="https://gitee.com/gqd000/blogimage/raw/master/img/image-20210413220753293.png" alt="image-20210413220753293"></p></li><li><p>③部署到GitHub 上。运行以下命令：</p><pre class="line-numbers language-none"><code class="language-none"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，已经可以通过<code>https://&lt;用户名&gt;.github.io</code>访问博客啦！<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简易的贪心算法</title>
      <link href="posts/7974.html"/>
      <url>posts/7974.html</url>
      
        <content type="html"><![CDATA[<h1 id="最简易的贪心算法"><a href="#最简易的贪心算法" class="headerlink" title="最简易的贪心算法"></a>最简易的贪心算法</h1><blockquote><p>参考资料：<a href="https://github.com/gqd000/Leetcode-note/blob/main/%E8%B0%B7%E6%AD%8C%E9%AB%98%E7%95%85Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0.pdf"><strong>谷歌高畅Leetcode刷题笔记</strong></a>。</p><p>题目网址：<a href="https://leetcode-cn.com/"><strong>LeetCode</strong></a>。</p></blockquote><h2 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h2><p>顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是<strong>局部最优的</strong>，从而使最后得到的结果是<strong>全局最优的</strong>。全局最优结果是局部最优结果的和，且局部结果<strong>互不相干</strong>！</p><h2 id="例题及题解"><a href="#例题及题解" class="headerlink" title="例题及题解"></a>例题及题解</h2><h3 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h3><h4 id="455-分发饼干-（简单）"><a href="#455-分发饼干-（简单）" class="headerlink" title="455.分发饼干 （简单）"></a><strong><a href="https://leetcode-cn.com/problems/assign-cookies/">455.分发饼干</a></strong> （简单）</h4><p><strong>题目大意：</strong></p><blockquote><p>给我们一堆饼干和一群孩子，要求我们把饼干分给孩子，每个孩子有一个饥饿值，每个饼干有一个饱腹值，且每个孩子只能分一个饼干，要求我们求出最多能吃饱的孩子数量。</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>首先可以分别将孩子饥饿值的数组和饼干饱腹值的数组升序排序，然后<strong>饥饿值最小</strong>的孩子吃<strong>饱腹值最少</strong>的饼   干，这样依次取值即可满足局部最优，局部最优加和即全局最优。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="135-分发糖果（困难）"><a href="#135-分发糖果（困难）" class="headerlink" title="135. 分发糖果（困难）"></a>135. <a href="https://leetcode-cn.com/problems/candy/">分发糖果</a>（困难）</h4><p><strong>题目大意：</strong></p><blockquote><p>一群孩子站成一排，每个孩子有自己的评分，现在要求我们给这些孩子分发糖果，要求：</p><ul><li>1.每个孩子至少分配一个糖果。</li><li>2.评分高于两侧的孩子得到的糖果数量必须高于两侧孩子得到的糖果数量。</li><li>求出至少需要准备的糖果数。</li></ul></blockquote><p><strong>解题思路：</strong></p><blockquote><p>这道题我们不再需要排序，只需要<strong>左右两次遍历</strong>即可，设数组cano记录每个孩子分得的糖果数量，数组ratings记录孩子的评分。首先我们初始化cano数组为<strong>1</strong>（即初始为糖果总数最小值），然后对数组ratings<strong>从左向右（左条件）</strong>进行遍历，当<code>ratings[i+1]&gt;ratings[i]</code>时，<code>cano[i+1]+1</code>；最后对ratings进行<strong>从右向左（右条件）</strong>遍历，与左边不同的是，此次遍历不能直接更新数组cano的值，需要取更新值和原值中大的值，即:<br>$$<br>cano(i+1)= max(cano(i),cano(i+1))。<br>$$<br>这样做即可同时满足左条件和右条件。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">candy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ratings<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> ct <span class="token operator">=</span> ratings<span class="token punctuation">.</span>length<span class="token punctuation">,</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cano <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ct<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ct<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> ct <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> ct <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//满足左规则后右规则可能会更新数据，因此取最大值保证同时满足左右规则</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cano<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>cano<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> it<span class="token operator">:</span>cano<span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">+=</span>it<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h3><h4 id="435-无重叠区间（中等）"><a href="#435-无重叠区间（中等）" class="headerlink" title="435. 无重叠区间（中等）"></a><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">435. 无重叠区间</a>（中等）</h4><p><strong>题目大意：</strong></p><blockquote><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。<strong>注意：</strong></p><ol><li>可以认为区间的终点总是大于它的起点。</li><li>区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。</li></ol></blockquote><p><strong>解题思路：</strong></p><blockquote><p>这个区间的尾元素总是大于首元素，要保证最优，需要起始区间的尾元素最小，这样才能容纳最多的区间。所以首先需要根据区间的尾元素按照升序排序（此处用到<a href="https://www.hexoblog.gq/posts/3456.html">自定义排序</a>），然后设定一个起始数begin =  intervals[0][1]；再遍历排序完成的区间数组，比较起始区间尾元素和第i（i = 1,2,3,…,intervals.length）个区间的首元素的大小，若：<br>$$<br>begin&gt;intervals[i][0]<br>$$<br>则说明第i个区间与初始区间重合，故计数cnt++；反之满足不重合条件，不计数，<strong>并更新初始区间尾元素为：</strong>begin = intervals[i][1]，最后返回cnt即可。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//自定义排序</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&gt;</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">else</span><span class="token punctuation">{</span>                begin <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：<a href="https://www.hexoblog.gq/posts/3456.html">自定义排序</a></p></blockquote><h4 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/">452. 用最少数量的箭引爆气球</a></h4><p><strong>题目大意：</strong></p><blockquote><p>给定一个数组points，包含<code>points.length</code>个区间，求不重叠区间的个数。</p></blockquote><p><strong>解题思路：</strong></p><blockquote><p>该题与上文中<a href="https://leetcode-cn.com/problems/non-overlapping-intervals/">435. 无重叠区间</a>有点类似，也可用lambda表达写，但有个坑：测试用例：<code>[[-2147483646,-2147483645],[2147483646,2147483647]]</code>，若直接用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序，相减会溢出，导致排序错误，所以应该这样写：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排序后和435题类似，先定义一个<code>begin = points[0][1]</code>，然后开始遍历，更新begin值。不同的是，要注意区间长度的影响，如测试用例：<code>[[1,2],[4,5],[1,5]]</code>，若排序为：</p><ul><li>[1,5]</li><li>[1,2]</li><li>[4,5]</li></ul><p>则计算出只需一箭就可射完，但实际需要两箭。解决方法：只需在判断<code>begin &gt; ponits[i][0]</code>后再判断是否<code>begin &gt; points[i][1]</code>，若是，则更新begin的值为<code>points[i][1]</code>，相当于缩小区间。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> points <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> o1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>o2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> begin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>                begin <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> begin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                begin <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode-cn.com/problems/partition-labels/">763. 划分字母区间</a></h4><p><strong>题目大意：</strong></p><blockquote><p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。如：</p><blockquote><p>输入：S = “ababcbacadefegdehijhklij”<br>输出：[9,7,8]<br>解释：<br>划分结果为 “ababcbaca”, “defegde”, “hijhklij”。<br>每个字母最多出现在一个片段中。<br>像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</p></blockquote></blockquote><p><strong>解题思路：</strong></p><blockquote><p>首先我们可以将某个区间内所有出现的字母<strong>最后出现（需要不断更新）</strong>的位置用数组<code>n</code>记录，然后设一个<code>begin</code>和<code>end</code>分别表示取出的区间的首位和末尾的位置，然后遍历所有字母，每遇到一个字母，就更新<code>end</code>的值，end要求取最后出现该字母的位置，即数组<code>n</code>中对应字母下标的值（总是取最大），即：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>n<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当某一段字母遍历结束时（即<code>i == end</code>），<code>end-begin+1</code>就是该段字母中字母的数量，存入结果数组<code>result</code>，然后更新<code>begin</code>的值为<code>begin=end+1</code>。</p></blockquote><p><strong>解题代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            end <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span>n<span class="token punctuation">[</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> end<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                begin<span class="token operator">=</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Leetcode-算法题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/5220.html"/>
      <url>posts/5220.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><a href="www.baidu.com">sdsd</a>,</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
